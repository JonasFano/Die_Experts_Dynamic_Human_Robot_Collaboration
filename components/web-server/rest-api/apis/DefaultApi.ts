/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActiveExperiment,
  ExperimentCreate,
  ExperimentResponse,
  HTTPValidationError,
  LogsCreate,
  LogsResponse,
  SystemCreate,
  SystemResponse,
  UISettingsCreate,
  UISettingsResponse,
} from '../models/index';
import {
    ActiveExperimentFromJSON,
    ActiveExperimentToJSON,
    ExperimentCreateFromJSON,
    ExperimentCreateToJSON,
    ExperimentResponseFromJSON,
    ExperimentResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LogsCreateFromJSON,
    LogsCreateToJSON,
    LogsResponseFromJSON,
    LogsResponseToJSON,
    SystemCreateFromJSON,
    SystemCreateToJSON,
    SystemResponseFromJSON,
    SystemResponseToJSON,
    UISettingsCreateFromJSON,
    UISettingsCreateToJSON,
    UISettingsResponseFromJSON,
    UISettingsResponseToJSON,
} from '../models/index';

export interface CreateExperimentRestExperimentsPostRequest {
    experimentCreate: ExperimentCreate;
}

export interface CreateLogRestLogsPostRequest {
    logsCreate: LogsCreate;
}

export interface CreateSystemRestSystemsPostRequest {
    systemCreate: SystemCreate;
}

export interface ExperiementLogsRestExperimentExperimentIdLogsGetRequest {
    experimentId: number;
}

export interface ReadExperimentRestExperimentsExperimentIdGetRequest {
    experimentId: string;
}

export interface ReadLogRestLogsLogIdGetRequest {
    logId: number;
}

export interface ReadSystemRestSystemsSystemIdGetRequest {
    systemId: number;
}

export interface UpdateRestUiSettingsPostRequest {
    uISettingsCreate: UISettingsCreate;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create Experiment
     */
    async createExperimentRestExperimentsPostRaw(requestParameters: CreateExperimentRestExperimentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperimentResponse>> {
        if (requestParameters['experimentCreate'] == null) {
            throw new runtime.RequiredError(
                'experimentCreate',
                'Required parameter "experimentCreate" was null or undefined when calling createExperimentRestExperimentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rest/experiments/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExperimentCreateToJSON(requestParameters['experimentCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentResponseFromJSON(jsonValue));
    }

    /**
     * Create Experiment
     */
    async createExperimentRestExperimentsPost(requestParameters: CreateExperimentRestExperimentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperimentResponse> {
        const response = await this.createExperimentRestExperimentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Log
     */
    async createLogRestLogsPostRaw(requestParameters: CreateLogRestLogsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogsResponse>> {
        if (requestParameters['logsCreate'] == null) {
            throw new runtime.RequiredError(
                'logsCreate',
                'Required parameter "logsCreate" was null or undefined when calling createLogRestLogsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rest/logs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LogsCreateToJSON(requestParameters['logsCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LogsResponseFromJSON(jsonValue));
    }

    /**
     * Create Log
     */
    async createLogRestLogsPost(requestParameters: CreateLogRestLogsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogsResponse> {
        const response = await this.createLogRestLogsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create System
     */
    async createSystemRestSystemsPostRaw(requestParameters: CreateSystemRestSystemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemResponse>> {
        if (requestParameters['systemCreate'] == null) {
            throw new runtime.RequiredError(
                'systemCreate',
                'Required parameter "systemCreate" was null or undefined when calling createSystemRestSystemsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rest/systems/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemCreateToJSON(requestParameters['systemCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemResponseFromJSON(jsonValue));
    }

    /**
     * Create System
     */
    async createSystemRestSystemsPost(requestParameters: CreateSystemRestSystemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemResponse> {
        const response = await this.createSystemRestSystemsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Experiement Logs
     */
    async experiementLogsRestExperimentExperimentIdLogsGetRaw(requestParameters: ExperiementLogsRestExperimentExperimentIdLogsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LogsResponse>>> {
        if (requestParameters['experimentId'] == null) {
            throw new runtime.RequiredError(
                'experimentId',
                'Required parameter "experimentId" was null or undefined when calling experiementLogsRestExperimentExperimentIdLogsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rest/experiment/{experiment_id}/logs`.replace(`{${"experiment_id"}}`, encodeURIComponent(String(requestParameters['experimentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LogsResponseFromJSON));
    }

    /**
     * Experiement Logs
     */
    async experiementLogsRestExperimentExperimentIdLogsGet(requestParameters: ExperiementLogsRestExperimentExperimentIdLogsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LogsResponse>> {
        const response = await this.experiementLogsRestExperimentExperimentIdLogsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Active Experiment
     */
    async getActiveExperimentRestExperimentsActivePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActiveExperiment>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rest/experiments/active`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActiveExperimentFromJSON(jsonValue));
    }

    /**
     * Get Active Experiment
     */
    async getActiveExperimentRestExperimentsActivePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActiveExperiment> {
        const response = await this.getActiveExperimentRestExperimentsActivePostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Image
     */
    async getImageImageGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/image`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Image
     */
    async getImageImageGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getImageImageGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Safety
     */
    async getSafetyStressLevelGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stress_level`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Safety
     */
    async getSafetyStressLevelGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getSafetyStressLevelGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Read Experiment
     */
    async readExperimentRestExperimentsExperimentIdGetRaw(requestParameters: ReadExperimentRestExperimentsExperimentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperimentResponse>> {
        if (requestParameters['experimentId'] == null) {
            throw new runtime.RequiredError(
                'experimentId',
                'Required parameter "experimentId" was null or undefined when calling readExperimentRestExperimentsExperimentIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rest/experiments/{experiment_id}`.replace(`{${"experiment_id"}}`, encodeURIComponent(String(requestParameters['experimentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentResponseFromJSON(jsonValue));
    }

    /**
     * Read Experiment
     */
    async readExperimentRestExperimentsExperimentIdGet(requestParameters: ReadExperimentRestExperimentsExperimentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperimentResponse> {
        const response = await this.readExperimentRestExperimentsExperimentIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read Log
     */
    async readLogRestLogsLogIdGetRaw(requestParameters: ReadLogRestLogsLogIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogsResponse>> {
        if (requestParameters['logId'] == null) {
            throw new runtime.RequiredError(
                'logId',
                'Required parameter "logId" was null or undefined when calling readLogRestLogsLogIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rest/logs/{log_id}`.replace(`{${"log_id"}}`, encodeURIComponent(String(requestParameters['logId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LogsResponseFromJSON(jsonValue));
    }

    /**
     * Read Log
     */
    async readLogRestLogsLogIdGet(requestParameters: ReadLogRestLogsLogIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogsResponse> {
        const response = await this.readLogRestLogsLogIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read System
     */
    async readSystemRestSystemsSystemIdGetRaw(requestParameters: ReadSystemRestSystemsSystemIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemResponse>> {
        if (requestParameters['systemId'] == null) {
            throw new runtime.RequiredError(
                'systemId',
                'Required parameter "systemId" was null or undefined when calling readSystemRestSystemsSystemIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rest/systems/{system_id}`.replace(`{${"system_id"}}`, encodeURIComponent(String(requestParameters['systemId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemResponseFromJSON(jsonValue));
    }

    /**
     * Read System
     */
    async readSystemRestSystemsSystemIdGet(requestParameters: ReadSystemRestSystemsSystemIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemResponse> {
        const response = await this.readSystemRestSystemsSystemIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read Ui Settings
     */
    async readUiSettingsRestUiSettingsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UISettingsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rest/ui-settings/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UISettingsResponseFromJSON(jsonValue));
    }

    /**
     * Read Ui Settings
     */
    async readUiSettingsRestUiSettingsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UISettingsResponse> {
        const response = await this.readUiSettingsRestUiSettingsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Serve Ui Data
     */
    async serveUiDataDataGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/data`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Serve Ui Data
     */
    async serveUiDataDataGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.serveUiDataDataGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set Image Settings
     */
    async setImageSettingsSettingsPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/settings/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Set Image Settings
     */
    async setImageSettingsSettingsPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.setImageSettingsSettingsPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Stop Experiment
     */
    async stopExperimentRestExperimentsStopPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperimentResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rest/experiments/stop`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentResponseFromJSON(jsonValue));
    }

    /**
     * Stop Experiment
     */
    async stopExperimentRestExperimentsStopPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperimentResponse> {
        const response = await this.stopExperimentRestExperimentsStopPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update
     */
    async updateRestUiSettingsPostRaw(requestParameters: UpdateRestUiSettingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UISettingsResponse>> {
        if (requestParameters['uISettingsCreate'] == null) {
            throw new runtime.RequiredError(
                'uISettingsCreate',
                'Required parameter "uISettingsCreate" was null or undefined when calling updateRestUiSettingsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rest/ui-settings/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UISettingsCreateToJSON(requestParameters['uISettingsCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UISettingsResponseFromJSON(jsonValue));
    }

    /**
     * Update
     */
    async updateRestUiSettingsPost(requestParameters: UpdateRestUiSettingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UISettingsResponse> {
        const response = await this.updateRestUiSettingsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
